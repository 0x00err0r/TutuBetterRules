# Quantumult Configuration DivineEngine ver. (基于 Quantumult X 1.0.29-678 示例配置文件修改)
# 
# 以 ";" 或 "#" 或 "//" 开头的行为注释行，删去注释符号本行才会生效。
#
# SS-URI scheme 请参考 https://github.com/shadowsocks/shadowsocks-org/wiki/SIP002-URI-Scheme
#
# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试 (测试结果为通过该节点访问此网页获得 HTTP 响应所需要的时间), 来确认节点的可用性.
# Quantumult 界面中的延迟测试方式均为网页响应性测试, 显示的最终延迟均为通过对应节点访问测试网页的 HTTP 延迟.
# 由于 Trojan 协议为无响应校验协议, 使得 HTTP 检测方式即使获得了 HTTP 响应, 也不代表节点一定可用.
#
# dns_exclusion_list 包含需要关闭 placeholder IP(198.18.0.0/15) 的域名列表, 不在 dns_exclusion_list 列表中的所域名将默认开启 placeholder IP 并启用 resolve-on-remote (远端解析 DNS), dns_exclusion_list 中域的 DNS 查询可能会也可能不会遵循 [dns] 部分中的设置.
#
# udp_whitelist 包含目的地的 UDP 端口, 如果留空则默认表示所有的端口都在 udp_whitelist 中. 如果带有目的地端口 UDP 包 (通过 Quantumult tunnel interface) 不在 udp_whitelist 中, 该 UDP 包将会被丢弃. 此项设置不会影响策略或代理服务器.
#
# udp_drop_list 包含目的地的 UDP 端口, 机制类似于 udp_whitelist 丢弃 UDP 数据包,但不会发回 ICMP 消息. 只有 udp_whitelist 允许的 UDP 数据包才能被 udp_drop_list 捕获.
#
# Quantumult X 将不会处理向 excluded_routes 列表中请求的流量. 当你每次修改这个配置时, 最好重新启动你的设备.
#
# resource_parser_url 的配置文件示例可以参考 https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js
#-----------------------------------------------------------------------------------------------------------------------------

[general]
resource_parser_url=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js
server_check_url=http://www.gstatic.com/generate_204
geo_location_checker=http://ip-api.com/json/?lang=en-US, https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/IP_API.js
dns_exclusion_list=*.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me, open.e.189.cn
excluded_routes=239.255.255.250/32

#
# 为保证获得最佳的 DNS 解析性能体验, Quantumult X 默认总是从当前网络 (系统配置) 的 DNS 服务器获取解析结果, 但你可以使用 no-system 参数来关闭此操作, 但是必须至少定义一个 DNS 服务器, 如 "server=223.5.5.5".
# 启用 no-ipv6 时, Quantumult X Tunnel 的 DNS 模块会直接让 AAAA 查询失败，但仍然允许来自 IPv6 DNS 服务器的 A 查询.
# DNS 解析结果仅用于 直连(direct) 规则和判定 IP 分流条件, 而不会用于 代理 的规则策略 (DNS 查询在远端服务器解析), Quantumult 不会获得目的 IP 和相关的域名.
# 当设置了 doh-server 时所有其他常规 (没有与之相关的特定域) DNS 服务器将被忽略.
# Multiple(并发查询) doh-server(s) 应配置在一行中, URL 应以逗号分隔. 如果 iOS 版本 < 13.0, 最多设置1个 doh-server. 如果 iOS 版本 < 15.0, 最多设置2个doh-server.
# 当使用的 doh-server 不是基于 HTTP/2 时, 重启 VPN 连接之前 DoH 将被暂时禁用并使用常规 DNS 服务器.
# 此处不允许将特定的域名指向 127.0.0.1. 如果你想将某个域名指向 127.0.0.1 如 example.com, 你可以直接在 "filter_local" 中添加 "host, example.com, reject" 来实现. 这一操作将会让域名的 DNS 结果返回 127.0.0.1.
#
[dns]
no-system
no-ipv6

# 自定义 DNS 服务器
# > Alibaba Public DNS
server=223.5.5.5
# > DNSPod Public DNS
server=119.29.29.29
# > Google Public DNS
server=8.8.8.8

# 本地 DNS 映射
# > Firebase Cloud Messaging
address=/mtalk.google.com/108.177.125.188
# > Google Dl
server=/dl.google.com/119.29.29.29
server=/dl.l.google.com/119.29.29.29
server=/update.googleapis.com/119.29.29.29
# > PlayStation
server=/*.dl.playstation.net/119.29.29.29
# > Router Admin Panel
server=/amplifi.lan/system
server=/router.synology.com/system
server=/sila.razer.com/system
server=/router.asus.com/system
server=/routerlogin.net/system
server=/orbilogin.com/system
server=/www.LinksysSmartWiFi.com/system
server=/LinksysSmartWiFi.com/system
server=/myrouter.local/system
server=/www.miwifi.com/system
server=/miwifi.com/system
server=/mediarouter.home/system
server=/tplogin.cn/system
server=/tplinklogin.net/system
server=/melogin.cn/system
server=/falogin.cn/system

#
# static 策略组会使用你 手动选择 的服务器.
# available 策略组使用第一个通过 server_check_url 测试后可用的服务器 (当策略被触发并且策略结果不可用时, 将立即启动并发 url 延迟测试. 如果当时没有网络请求正在采取该策略，这意味着策略处于空闲状态, 即使服务器宕机也不会启动测试, 此时可以通过手动启动测试来更新服务器状态, 但没有任何意义).
# round-robin 策略组会为每一个新链接轮询使用组内策略.
# dest-hash 策略根据使用目标地址 (域或 IP) 作为输入的哈希函数指向服务器. 此策略对于需要会话持久性的用例特别有用. 从策略中添加或删除服务器可能会改变结果.
# url-latency-benchmark 策略使用具有最佳 (将考虑 tolerance(ms) 参数) url 延迟结果的服务器. 当你手动启动 Quantumult X 容器应用中的 url 测试时, 策略结果也会更新. 对于 check-interval(s) 参数, 如果此策略已经被任何请求激活, 那么该参数生效. 如果 alive-checking 参数为 true, 即使策略处于空闲状态，仍将考虑 check-interval 并启动基准测试.
# ssid 策略组会根据网络环境选用指定的服务器.
# 资源标签和服务器标签的正则表达式参数仅适用于 static, available, round-robin 类型的策略组.
#
[policy]
static=Advertising, reject, proxy, direct, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Advertising.png
static=Streaming, proxy, direct, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Streaming.png
static=StreamingSE, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/StreamingSE.png
static=Telegram, proxy, direct, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Telegram.png
static=Global, proxy, direct, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Global.png
static=Apple, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Apple.png
static=Domestic, direct, proxy, reject, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Domestic.png
static=Final, proxy, direct, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Final.png

# 利用正则表达式匹配各地区节点
#available=Hong Kong, server-tag-regex=(?=.*(香港|HK|(?i)Hong))^((?!(手游|游戏(?i)Game)).)*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Hong_Kong.png
#available=Taiwan, server-tag-regex=(?=.*(台湾|台灣|台北|TW|(?i)Taiwan))^((?!(手游|游戏(?i)Game)).)*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Taiwan.png
#available=Japan, server-tag-regex=(?=.*(日本|东京|東京|大阪|JP|(?i)Japan))^((?!(手游|游戏(?i)Game)).)*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Japan.png
#available=Singapore, server-tag-regex=(?=.*(新加坡|狮城|SG|(?i)Singapore))^((?!(手游|游戏(?i)Game)).)*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Singapore.png
#available=United States, server-tag-regex=(?=.*(美国|美國|洛杉|西雅|荷塞|US|(?i)States|American))^((?!(手游|游戏(?i)Game)).)*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/United_States.png

#
# "tag" 和 "enabled" 参数是可选参数
# 默认所有远程资源的同步时间间隔是 172800s (48h)
# 你可以将使用类似 update-interval=172800 的方式去自定义同步时间间隔 (单位: 秒), 如果 update-internal 的数值设置为负数, 则会禁用自动同步功能 
#
[server_remote]

#
# "tag", "force-policy" 和 "enabled" 是可选参数.
# 当设置 force-policy 参数时, 远程资源的 filter 中指定的策略将会被忽略, 而会强制使用 force-policy 指定的策略.
#
[filter_remote]
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Unbreak.list, tag=Unbreak, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Advertising.list, tag=Advertising, force-policy=Advertising, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/AdvertisingPlus.list#type=domain-set, tag=Advertising+, force-policy=Advertising, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Privacy.list, tag=Privacy, force-policy=Advertising, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Hijacking.list, tag=Hijacking, force-policy=Advertising, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Streaming.list, tag=Streaming, force-policy=Streaming, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/StreamingSE.list, tag=StreamingSE, force-policy=StreamingSE, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Extra/Telegram/Telegram.list, tag=Telegram, force-policy=Telegram, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Global.list, tag=Global, force-policy=Global, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Extra/Apple/Apple.list, tag=Apple, force-policy=Apple, update-interval=172800, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/China.list, tag=China, force-policy=Domestic, update-interval=172800, opt-parser=true, enabled=true

#
# "tag" 和 "enabled" 是可选参数.
#
[rewrite_remote]
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=General, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/Advertising.conf, tag=Block Advertising, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/AdvertisingPlus.conf, tag=Block Advertising+, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/YouTubeAds.conf, tag=YouTubeAds, update-interval=172800, opt-parser=false, enabled=false
https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.conf, tag=BoxJS, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/VirgilClyne/iRingo/main/qxrewrite/Weather.qxrewrite, tag= iRingo for Apple Weather, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/VirgilClyne/iRingo/main/qxrewrite/Location.qxrewrite, tag= iRingo for Location Services, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/VirgilClyne/iRingo/main/qxrewrite/Siri.qxrewrite, tag= iRingo for Siri & Search, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/VirgilClyne/iRingo/main/qxrewrite/TV.qxrewrite, tag= iRingo for TV app, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/VirgilClyne/iRingo/main/qxrewrite/News.qxrewrite, tag= Unlock Apple News 🇺🇸US, update-interval=172800, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DualSubs/DualSubs/main/qxrewrite/DualSubs.qxrewrite, tag=🍿️ DualSubs for Streaming Media, update-interval=172800, opt-parser=false, enabled=false
https://raw.githubusercontent.com/DualSubs/DualSubs/main/qxrewrite/DualSubs.YouTube.qxrewrite, tag=🍿️ DualSubs for YouTube, update-interval=172800, opt-parser=false, enabled=false

#
# 只有在 obfs 混淆方式为 obfs=http, obfs=ws, obfs=wss 时才能填写可选的 obfs-uri 参数.
# 在 wss 混淆方式中, obfs-host 参数将被用来进行 TLS 握手和设置 HTTP 请求头中的 host 字段, 如果使用 wss 混淆方式而不配置 obfs-host, 将会使用服务器地址作为混淆域名.
# 当使用 obfs=ws 和 obfs=wss 的混淆方式时, 服务器可以使用 v2ray-plugin (mux = 0),v2ray-core, trojan-go 完成部署.
# 注意: shadowsocks 的 udp-over-tcp 只有部署了 shadowsocksr python 版本的服务器才支持, 其他版本只支持UDP中继本身. 如果你将 udp-relay 和 udp-over-tcp 用于 shadowsocks, 则必须确保你的服务器部署了 shadowsocksr python 版本.
# 注意: obfs=tls 与 obfs=over-tls 不同. obfs=tls 是 shadowsocks 项目相关的混淆插件, 只是对 TLS 协议的混淆. obfs=over-tls 是 TLS 协议. Quantumult X 支持shadowsocks的这两种协议.
# obfs 插件 tls1.2_ticket_auth 比 tls1.2_ticket_fastauth 和 obfs tls 多一次 RTT, 因此更建议使用 tls1.2_ticket_fastauth
# chacha20-ietf-poly1305 和 chacha20-poly1305 这两种加密方式在 VMess 配置中效果相同.
# 用于 SSL pinning 的 tls-cert-sha256 或 tls-pubkey-sha256 可以由 openssl 使用以下命令生成:
# openssl x509 -noout -fingerprint -sha256 -inform pem -in your-cert.pem
# openssl x509 -inform pem -pubkey -noout < your-cert.pem | openssl pkey -pubin -outform der | openssl dgst -sha256
# 如果 tls-verification 为 false, 则 tls-cert-sha256 和 tls-pubkey-sha256 参数将被忽略.
# 如果设置了 tls-pubkey-sha256, 则 tls-cert-sha256 参数将被忽略.
# tls13 参数已被弃用 (自 v1.0.26 起), 无论你设置什么, TLS 1.3版本都被支持.
#
[server_local]



[filter_local]
# Local Area Network 局域网
host-suffix, local, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 224.0.0.0/24, direct
ip-cidr, 100.64.0.0/10, direct
ip6-cidr, fe80::/10, direct

final, Final

#
# "reject" 策略会返回 HTTP 状态码 404, 不附带任何额外内容.
# "reject-200" 策略会返回 HTTP 状态码 200, 不附带任何额外内容.
# "reject-img" 策略返回 HTTP 状态码 200, 同时附带 1px gif.
# "reject-dict" 策略返回 HTTP 状态码 200, 同时附带一个空的 JSON 对象.
# "reject-array" 策略返回 HTTP 状态码 200, 同时附带一个空的 JSON 数组.
# "request-header" 适用于所有 HTTP header, 你可以在一个正在表达式中匹配多个 header (包括 CRLF).
# "echo-response" 策略返回匹配的 URL 的内容类型, body 文件应该被保存在本地 "我的 iPhone - Quantumult X - Data".
# 如果 rewrite 操作与 body 相关, Quantumult 会自动处理长度和编码相关的 HTTP header 的字段, 无需自行处理. response-body 和 script-response-body 最大支持的返回体大小为 1024 KB (解压后).
# 如果 body 为空, 则不会执行 body 相关 rewrite 操作.
# 当在 rewrite 中使用 javascript 时, 你可以使用这些对象: $request, $response, $notify(title, subtitle, message), console.log(message) 和 Quantumult 所有内置对象 (带有前缀"$").
# 支持: $request.scheme, $request.method, $request.url, $request.path, $request.headers, $response.statusCode, $response.headers, $response.body.
# 当响应与请求有关时, $request.sessionIndex 等效于 $response.sessionIndex. sessionIndex 与橙色 "活动" 面板中的TCP记录的索引无关.
# $notify(title, subtitle, message) 将会触发 iOS 推送, 前提是需要在系统中开启 Quantumult 的推送权限.
# $prefs 用来持久化存储: $prefs.valueForKey(key), $prefs.setValueForKey(value, key), $prefs.removeValueForKey(key), $prefs.removeAllValues().
# console.log(message) 会将输出记录到 Quantumult 的日志文件中, 前提需要将 log level 设置为 debug 等级.
# setTimeout(function() { }, interval) 会在指定时间间隔 (单位: 毫秒) 后运行函数.
# 适用于 script-request-header, script-request-body, script-response-header, script-response-body 和 script-echo-response 的脚本应该存储在本地 "我的 iPhone - Quantumult X - Scripts" 或 "iCloud 云盘 - Quantumult X - Scripts". 脚本内容可以参考 https://raw.githubusercontent.com//crossutility/Quantumult-X
# 参数 script-analyze-echo-response 和 script-echo-response 的区别在于，前者会等待 request body.
#
[rewrite_local]

#
# $task.fetch() 会构造一个 HTTP 请求并处理返回, body 仅支持纯文本. 如果你想串行请求, 你可以将 $task.fetch() 可以嵌入到另一个 $task.fetch() 的 completionHandler 中.
# 脚本应该存储在本地 "我的 iPhone - Quantumult X - Scripts" 或 "iCloud 云盘 - Quantumult X - Scripts". 脚本内容可以参考 https://raw.githubusercontent.com//crossutility/Quantumult-X/blob/master/sample-task.js
# 默认 HTTP 请求过期时间是 10 秒.
#
# 支持 5 位或 6 位 (不包括指令) cron 语法. 网络改变时触发 event-network. 当用户点击 UIAction 的时候, 触发 event-interaction. event 相关的任务只有在 Quantumult X Tunnel 运行时才能被触发.
#
[task_local]
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag=流媒体解锁查询, img-url=arrowtriangle.right.square.system, enabled=true
0 0 6 * * * https://raw.githubusercontent.com/evilbutcher/Quantumult_X/master/check_in/idaily/idaily.js, tag=iDaily每日环球视野, img-url=https://raw.githubusercontent.com/evilbutcher/Quantumult_X/master/picture/idaily.png, enabled=false

#
# 部署本地 HTTP 服务器, 使用 JavaScript 进行数据处理.
# 输入变量为 $reqeust.url, $reqeust.path, $reqeust.headers, $reqeust.body.
# 输出响应为 $done like $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string").
# 你可以使用签名或任何其他验证方法来验证请求是否合法.
# 部署完成后通过 http://127.0.0.1:9999/your-path/your-api/ 访问.
#
[http_backend]
https://raw.githubusercontent.com/chavyleung/scripts/master/chavy.box.js, host=boxjs.com, tag=BoxJS, path=^/, enabled=true

#
# 只有 TLS SNI 或 hostname 中的目的地地址才会被 MitM 处理.
#
# 默认情况下，当 MitM 处理 HTTPS 请求时, Quantumult X 从原始站点获取证书 (证书将被缓存), 保留大部分需要的原始证书信息并使用 MitM 根 CA 证书重新签名, 这是创建 MitM 证书的推荐 (和更兼容) 方式.
# 偶尔有些用户喜欢调试不存在域名的 HTTPS 请求, 所以原来的证书甚至都不存在. 这时需要设置参数 simple_cert_hostname. 带有 simple_cert_hostname (和 hostname) 中的 TLS SNI 名称的 HTTPS 请求将使用纯本地生成的 MitM 证书.
#
# 注意! ! ! 为安全起见, 请妥善保管 CA 密码和 p12 证书, 切勿泄露!
#
[mitm]
